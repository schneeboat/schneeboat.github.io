[{"content":"Background You have been managing a product long enough that you know every detail about the technical stuff, the people that take care of each part, their personalities, etc. Now you need to transfer all the responsibilities to someone else who doesn\u0026rsquo;t know anything. How to do it methodically?\n  Phase: Operation\n  Scale: Small\n  Complexity: Very complex\n  No online modern tools for managing the product (*sigh*)\nStep 1: Gather documents. Notable examples: Dev:   Business Objectives\n  Plannings\n  Requirements Specifications\n  Technical Architecture (if any)\n  Change Management Specifications (if any)\n  UX, UI\n  Source codes (if any)\n  Dev documentation (if any)\n  Bugs, Tasks\n  QA reports\n  GROUP BY every month (depends)\nOps:   Go-live brochures\n  User Manual\n  Admin Manual\n  FMEA (Failure Modes and Effects Analysis)!!!\n  User Feedbacks\n  Step 2: Send the above in batches as \u0026ldquo;Daily Reads\u0026rdquo; Meanwhile, produce the following:\n  A file that contains the name of every team member, and their related responsibilities in the product\n  Contact each party to add permissions for the new person\n  A file that contains EVERY link to all related platforms (test, prod, middlewares, console, user management, etc)\n  A step by step guide to producing product analysis\n  Or write a python script if you have too much time\n  Step 3: Schedule meetings Don\u0026rsquo;t over-complicate things. Get all middlewares and anything useful ready, then use the product as a normal user, show what happens behind the scenes, explain what could go wrong at each step, why is that, and how to solve it. It must cover every scenario. Record videos.\nStep 4: Wait and see Be patient and answer all the questions :)\nConclusion Since you guys are managing products, you must have your own ways of handling it. If you find my method too much of \u0026ldquo;legacy\u0026rdquo;, too old-fashioned, feel free to chat with me in the section below ‚¨áÔ∏è\n","permalink":"https://missalexia.com/stories/aesthetics-of-product/","summary":"Legacy method","title":"Aesthetics of Product Handover"},{"content":"How to make a quality user interface/dashboard?\n We don\u0026rsquo;t consider the actual data here It\u0026rsquo;s not a one-size-fits-all thing, rather some ideas Vendor-neutral Very unstructured for now. More experience needed  1. Basics (More organizational-wise) Make sure anyone can answer the following questions just by looking at the dashboard:\n Who are the intended users/viewers? It can be deducted from the title. The title should contain information such as department, purpose, etc. Who is the business owner? Add a small line of text with contact info placed in the corner. Who is the IT support? Same as above. Where do the data come from? Same. When was the last time the data got updated? Same. Are there specific terms/concepts/remarks? Will new guys be able to understand everything? Add a small question mark icon with a pop-up on hover. Can your colleagues make remarks? Make a comment/discuss section if suitable.  2. Design (More general)  It\u0026rsquo;s a crime to use a dark background by default. Period. Golden ratio can be applied to many things. For example, font size and layout design. Some elder friends might not have as good eyesight as you. So, avoid text with grey colour. Use black or make it less grey. It\u0026rsquo;s very easy to overestimate the font size. Elder friends might find it hard to read (sometimes). Just good to know. If there\u0026rsquo;s a graph, ditch the numbers in the y axis. Instead, mark the number on each column. Don\u0026rsquo;t have to use advanced statistical concepts. Your boss most likely won\u0026rsquo;t understand those. Don\u0026rsquo;t use pie charts or those weird-looking ones. Color: Using 1 colour is as terrible as using 5+ colours. Best place for ideas: your company\u0026rsquo;s logo. It would be wonderful if everything can fit on 1 screen without scrolling. If not, make another \u0026ldquo;tab page\u0026rdquo;. It will make it more intuitive to group all the filter selector boxes/functionalities in one area. Top, top-left, or top-right. Rather than scatter them all over the page. Top priority: make every text display fully. No negotiation. Tricky places: inside the drop-down filter, in the table, in the x-axis. A good practice is to use abbreviations to make the titles in the table as short as possible. In the table, it\u0026rsquo;s good to keep each column with a similar width, but it\u0026rsquo;s terrible to see massive empty space inside the cell. Resolution: A big headache.  Not finished\n","permalink":"https://missalexia.com/stories/aesthetics-of-business-intelligence/","summary":"Draft","title":"Aesthetics of Business Intelligence"},{"content":"üìå Click Here.\nHave you encountered a long article that you just don\u0026rsquo;t have the time to read? Here is a trick to help you grasp the main idea. Just by copy-pasting the text, you will see the following:\n Summary: The most crucial sentence of the article. (Calculated by using vector representations) Wordcloud: Top N most frequently appeared non-trivial words. (NLTK) Sentiment: The decomposed sentiment scores. Whether it has positive, negative, neutral, or compound sentiment.  ","permalink":"https://missalexia.com/stories/natural-language-processing-app/","summary":"NLP \u0026amp; Streamlit","title":"A Simple Text Analysis Tool"},{"content":"Have fun\nDefine class class Clock(): def __init__(self, digit): self.digit = digit def pattern(self): if self.digit == '0': letter_0 =[[\u0026quot; \u0026quot; for i in range(5)]for j in range(5)] for i in range(5): for j in range (5): if (i==0 or i==4 or j==0 or j==4): letter_0[i][j]=\u0026quot;#\u0026quot; return letter_0 if self.digit == '1': letter_1 =[[\u0026quot; \u0026quot; for i in range(5)]for j in range(5)] for i in range(5): for j in range (5): if (j==4): letter_1[i][j]=\u0026quot;#\u0026quot; return letter_1 if self.digit == '2': letter_2 =[[\u0026quot; \u0026quot; for i in range(5)]for j in range(5)] for i in range(5): for j in range (5): if ((i==0 or i ==2 or i==4)or (i==1 and j ==4)or(i==3 and j ==0)): letter_2[i][j]=\u0026quot;#\u0026quot; return letter_2 if self.digit == '3': letter_3 =[[\u0026quot; \u0026quot; for i in range(5)]for j in range(5)] for i in range(5): for j in range (5): if (i==0 or i ==2 or i==4 or j ==4): letter_3[i][j]=\u0026quot;#\u0026quot; return letter_3 if self.digit == '4': letter_4 =[[\u0026quot; \u0026quot; for i in range(5)]for j in range(5)] for i in range(5): for j in range (5): if (j==4 or i == 2 or (j==0 and i\u0026lt;=1)): letter_4[i][j]=\u0026quot;#\u0026quot; return letter_4 if self.digit == '5': letter_5 =[[\u0026quot; \u0026quot; for i in range(5)]for j in range(5)] for i in range(5): for j in range (5): if ((i==0 or i ==2 or i==4)or (i==1 and j ==0)or(i==3 and j ==4)): letter_5[i][j]=\u0026quot;#\u0026quot; return letter_5 if self.digit == '6': letter_6 =[[\u0026quot; \u0026quot; for i in range(5)]for j in range(5)] for i in range(5): for j in range (5): if (i==0 or i==2 or i==4 or j==0 or (i==3 and j==4)): letter_6[i][j]=\u0026quot;#\u0026quot; return letter_6 if self.digit == '7': letter_7 =[[\u0026quot; \u0026quot; for i in range(5)]for j in range(5)] for i in range(5): for j in range (5): if (i==0 or j==4): letter_7[i][j]=\u0026quot;#\u0026quot; return letter_7 if self.digit == '8': letter_8 =[[\u0026quot; \u0026quot; for i in range(5)]for j in range(5)] for i in range(5): for j in range (5): if (i==0 or i==4 or j==0 or j==4 or i ==2): letter_8[i][j]=\u0026quot;#\u0026quot; return letter_8 if self.digit == '9': letter_9 =[[\u0026quot; \u0026quot; for i in range(5)]for j in range(5)] for i in range(5): for j in range (5): if (i==0 or i==2 or j==4 or (i==1 and j==0)): letter_9[i][j]=\u0026quot;#\u0026quot; return letter_9 if self.digit == ':': letter_dots =[[\u0026quot; \u0026quot; for i in range(5)]for j in range(5)] for i in range(5): for j in range (5): if ((i==1 and j ==2)or(i==3 and j ==2)): letter_dots[i][j]=\u0026quot;#\u0026quot; return letter_dots if self.digit == 'empty': letter_empty =[[\u0026quot; \u0026quot; ]] return letter_empty  Define function def printpattern(input): for i in range(5): for j in range(5): print(Clock(input[0]).pattern()[i][j],end=\u0026quot;\u0026quot;) print(Clock('empty').pattern()[0][0],end=\u0026quot;\u0026quot;) for j in range(5): print(Clock(input[1]).pattern()[i][j],end=\u0026quot;\u0026quot;) print(Clock('empty').pattern()[0][0],end=\u0026quot;\u0026quot; ) for j in range(5): print(Clock(input[2]).pattern()[i][j],end=\u0026quot;\u0026quot;) print(Clock('empty').pattern()[0][0],end=\u0026quot;\u0026quot; ) for j in range(5): print(Clock(input[3]).pattern()[i][j],end=\u0026quot;\u0026quot;) print(Clock('empty').pattern()[0][0],end=\u0026quot;\u0026quot; ) for j in range(5): print(Clock(input[4]).pattern()[i][j],end=\u0026quot;\u0026quot;) print()  Inputs input_1=\u0026quot;12:34\u0026quot; input_2=\u0026quot;56:78\u0026quot; input_3=\u0026quot;09:09\u0026quot;  Outputs  # ##### ##### # # # # # # # # # ##### ##### ##### # # # # # # ##### ##### # ##### ##### ##### ##### # # # # # # ##### ##### # ##### # # # # # # # ##### ##### # ##### ##### ##### ##### ##### # # # # # # # # # # # ##### # # ##### # # # # # # # ##### # ##### # ","permalink":"https://missalexia.com/stories/print_number_with_python/","summary":"A python clock. Have fun.","title":"Print Numbers with Python"},{"content":"To be improved.\n","permalink":"https://missalexia.com/stories/microservices/","summary":"Something technical","title":"Microservices Model"},{"content":"To be improved.\n","permalink":"https://missalexia.com/stories/process-diagram-service-request/","summary":"Simple business process for self-serving services","title":"Process Diagram: Service Request"},{"content":"2 concepts will be introduced: small-world network and scale-free network\nSmall-world network Most nodes are not neighbors of one another, but the neighbors of any given node are likely to be neighbors of each other and most nodes can be reached from every other node by a small number of hops or steps.\nThere are several ways to determine if a network has the ‚Äòsmall-world‚Äô property. The simplest being:\nL: The typical distance (shortest-length of the path) between 2 randomly chosen nodes in the network. In other words, you need to find the average shortest path length between all randomly chosen pairs of nodes in the network. N: number of nodes in the network. A network is said to be a small-world network (or to satisfy the small-world property) if the mean distance between pairs of nodes is small relative to the total number of nodes in the network. Basically, if L and log N are of the same order of magnitude, then, you can say it is a small-world network.\nBack to our co-authorship network, it is important only to consider the largest component of the whole network. Before calculating, import networkx module.\nAs the calculation showed, L and log N have the same order of magnitude (are on the same scale), so the largest component of the co-authorship network is a ‚Äòsmall-world‚Äô network.\nScale-free network A scale-free network is a network whose degree distribution follows a power law. (or asymptotically)\nIn a small-world network with a degree distribution following a power-law, deletion of a random node rarely causes a dramatic increase in mean-shortest path length (or a dramatic decrease in the clustering coefficient). This follows from the fact that shortest paths between nodes flow through hubs, and if a peripheral node is deleted it is unlikely to interfere with the passage between other peripheral nodes. As the fraction of peripheral nodes in a small world network is much higher than the fraction of hubs, the probability of deleting an important node is very low.\n","permalink":"https://missalexia.com/stories/network-analysis-3/","summary":"Part 3","title":"Social Network Analysis 3"},{"content":"Continuing from Part 1, where I showed how to build a network from scratch. I will explain 2 common network measures: centrality \u0026amp; assortativity. With python module networkx, they can be calculated easily. Consider our co-authorship network, namely, each node represents one author. Note that it is a complex network with many connected components and each component is an undirected multi-graph that contains multiple edges (self-loop, in this case, is not defined or does not exist in theory). There is an edge between 2 nodes if they collaborate in 1 publication.\nCentrality ‚ÄòWhat characterizes an important vertex?‚Äô\nFor our co-authorship network, to identify the most important authors, it‚Äôs enough to calculate the following 3 different measures and assign them to each author, then sort the values in descending order.\n  Degree centrality: This is the simplest centrality measure. It‚Äôs given by the number of links attached to the node. In plain words: how many publications in total has the author published? Luckily, given its simplicity, you can even calculate in pandas dataframe: given a list of lists, count how many times each unique individual appears and sort in descending order. the higher the degree, the more important the author.\n  Betweenness centrality: For finding the individuals who influence the flow around a system. Vertices that have a high probability to occur on a randomly chosen shortest path between two randomly chosen vertices have a high betweenness. This measure shows which nodes are ‚Äòbridges‚Äô between nodes in a network. It does this by identifying all the shortest paths and then counting how many times each node falls on one.\n  PageRank: It uncovers nodes whose influence extends beyond their direct connections into the wider network. PageRank assigns nodes a score based on their connections, and their connections‚Äô connections. It is similar to Eigenvector Centrality.\n  Assortativity ‚ÄòIs there a tendency of nodes with the same magnitude of the degree to connect to each other, or are large-degree nodes primarily connected to low-degree nodes?‚Äô\nAssortativity coefficient: It is the Pearson correlation coefficient of degree between pairs of linked nodes. The assortativity ranges from ‚Äì1 to +1, positive values meaning a tendency for nodes of similar degrees to connect to each other, negative values mean that large-degree nodes tend to attach to low degree nodes. For regular graphs, this measure is not well-defined, so the function will calculate a nan value. We can interpret this as 0.\nFor the co-authorship network, I calculated the assortativity coefficient for each component, I then sort the values by the component size in descending order and plot it. For my partially collected data, it gives the following figure:\nSince for this network, the majority of the components are of nan value, I visualized a separate graph where there are only non-null values.\nAs the component size decaying, the assortativity coefficient shows an asymptotic tendency to decrease. It suggests that the larger the component, the higher the probability that one author is connected with another author with similar degree. The weighted average mean of the assortativity of the whole network is 0.39, so there is a positive correlation in the general picture.\n","permalink":"https://missalexia.com/stories/network-analysis-2/","summary":"Part 2","title":"Social Network Analysis 2"},{"content":"There are plenty of resources on the internet about the definitions of social network. Always feel free to check them out before reading this:)\nMy ‚Äòdefinition‚Äô: A social network is like a giant graph, each node represents a unique entity, there‚Äôs 1 edge between 2 nodes if there‚Äôs 1 connection (e.g. 1 collaboration) between them. And it is very important to consider self-loop and multiple edges.\nI have to mention co-authorship analysis again. Now, imagine, there is a scientific publication, there are several authors writing it together, the authors may come from the same institution (maybe from different departments), or from different institutions. And they may come from different countries, or worse, from the same country.\nNow, consider 3 different networks: NW1: node = author\nNW2: node = institution\nNW3: node = country\nThere are several important aspects:\nNW1: Although there‚Äôs a probability that 2 people share the same name, in my opinion, it‚Äôs really negligible in our network. For that matter, if a publication is written solely by 1 author, it‚Äôs pointless to say he collaborated with himself.\nNW2 \u0026amp; NW3: They are a little tricky. For example:\nScenario 1: There is a publication, with 6 authors, all coming from Hungary, then, {Hungary(node), Hungary(node), 1(#edge)}. Why? Because there is only 1 publication.\nScenario 2: There is a publication, with 6 authors, 2 of them from Hungary, 3 of them from Poland, 1 from Slovakia, then {Hungary, Poland, 1}, {Hungary, Slovakia, 1}, {Poland, Slovakia, 1}\nExample: Input:\neach_letter_is_a_country = [['A', 'B', 'D'], ['C', 'C', 'E', 'A'], ['D', 'C', 'F'], ['H'], ['C', 'D'], ['B', 'B', 'B']] each_letter_is_an_author = [['A', 'B'], ['B', 'H', 'C'], ['F', 'C', 'A']]  In the second list, we can assume that in each sublist, every element is unique.\nOutput:\n node: country   node: author  The algorithm is very simple:\ndef get_adjacency_dict_multi_loop(matrix): unik = [] for i in matrix: for j in i: unik.append(j) keys = list(set(unik)) dictionary_node={} for key in keys: value=[] for sublist in matrix: if key in sublist: li = list(sublist) li.remove(key) value=value+list(set(li)) dictionary_node[key]=value return dictionary_node ","permalink":"https://missalexia.com/stories/network-analysis-1/","summary":"Part 1","title":"Social Network Analysis"},{"content":"Task A girl wants to lose weight, but in the meantime, she does not want to be in lack of certain nutritions. Find her a minimum calorie diet that contains at least 800 mg of calcium, 55 grams of protein, and 200 grams of carbohydrates\nIn order to avoid monotony, she decides to eat at most 5 units of each food type. She likes eating yogurt with apples, so any time she eats a yogurt, she eats an apple with it. She does not want to eat baked beans and roast chicken on the same day, so she decides that she will only eat from one of them.\nThe point is, we need to decide:\n  What food she will eat\n  How many items of it to eat\n  so that to satisfy nutrition needs and minimize total calories.\nThat‚Äôs why the above two points can be our variables.\nVAR:\nx_i: =1 if she eats i, =0 if not (i=1..5) binary\nb_i = units she eats for i integer\nPARAM:\nc_i: calcium in i\np_i: protein in i\nk_i: carb in i\nz_i: calories in i\nCONSTRAINTS:\nshe decides to eat at most 5 units of each food type 0 ‚â§ b_i ‚â§5 for all i\nany time she eats a yogurt, she eats an apple b_2 * x_2 ‚â§ b_1 * x_1\nShe does not want to eat baked beans and roast chicken on the same day, so she decides that she will only eat from one of them x_3 + x_5 = 1\nshe does not want to be in lack of certain nutritions sum_i(b_i * x_i *c_i) ‚â• 800 sum_i(b_i * x_i *p_i) ‚â• 55 sum_i(b_i * x_i *k_i) ‚â• 200\nOBJ:\nminimize sum_i (b_i * x_i *z_i)\nSolve in XPRESS Declatation Input param \u0026amp; constraints Output code Output So, she will eat 5 apples, 5 yogurts, 5 baked beans, and 4 boiled eggs each day to satisfy her nutrition needs and she will get minimum calories: 1687 kcal from this plan.\n","permalink":"https://missalexia.com/stories/mixed-integer-programming/","summary":"Something mathematical","title":"A Mixed-integer Programming Problem"},{"content":"Task: A type of product is manufactured by refining raw oils and blending them together. The raw oils are of two categories:\nVegetable oils: VEG 1 VEG 2\nNon-vegetable oils: OIL 1 OIL 2 OIL 3\nEach oil may be purchased for immediate delivery (January) or bought on the futures market for delivery in a subsequent month. Prices at present and in the futures market are given below in (¬£/ton):\nThe final product sells at ¬£150 per ton.\nVegetable oils and non-vegetable oils require different production lines for refining. In any month, it is not possible to refine more than 200 tons of vegetable oils and more than 250 tons of non-vegetable oils. There is no loss of weight in the refining process, and the cost of refining may be ignored.\nIt is possible to store up to 1000 tons of each raw oil for use later. The cost of storage for vegetable and non-vegetable oil is ¬£5 per ton per month. The final product cannot be stored, nor can refined oils be stored.\nThere is a technological restriction of hardness on the final product. In the units in which hardness is measured, this must lie between 3 and 6. It is assumed that hardness blends linearly and that the hardnesses of the raw oils are:\nAt present, there are 500 tons of each type of raw oil in storage. It is required that these stocks will also exist at the end of June.\nIn addition,\n  We can use at most three different types of raw oils each month.\n  If we decide to use one type of raw oil in a month, we have to use at least 20 tons of it.\n  If we use one of the vegetable oils in a month, then we have to use OIL3 as well.\n  How to maximize profit?\nMODEL: Variables: x_ij: num of tons we purchase from oil i in month j; i=1..5, j=1..6 (it‚Äôs clear that when i =1..2, it refers to veg oil, and non-veg otherwise)\nu_ij: num of tons we use from oil i in month j\ns_ij: num of tons we store from oil i in month j\np_j: num of tons we produce in month j\nh_ij: =1 if we use oil i in month j; h_ij=0 if not (binary)\nParameters: c_ij: price of oil i in month j\nh_i: hardness of oil i\nConstraints: (basically go through the text and model each useful information one by one)\nsum(u_ij) = p_ij, for all j\nsum(u_ij) ‚â§ 200, for i=1..2, for all j\nsum(u_ij) ‚â§ 250, for i =3..5, for all j\ns_ij ‚â§ 1000, for all i, j\ns_i6 =500, for all i\ns_i1 = 500+x_i1-u_i1\ns_ij = s_ij-1 + x_ij-u_ij\nsum_i(h_iu_ij )‚â• 3p_j, for all j\nsum_i(h_iu_ij) ‚â§ 6p_j, for all j\nsum_i(h_ij)‚â§ 3, for all j\nu_ij ‚â• 20*h_ij, for all i, j\nu_ij ‚â§ M*h_ij, M=250\nu_ij ‚â§u_5j, for all i =1..2, for all j\nObjective: maximize(sum_j(150p_j )- sum_ij(c_ijx_ij -5*s_ij))\nWe copy the model to XPRESS in a similar manner. This is the output of the model.\nAnd you can see a clear manufacturing policy to maximize the profit.\n","permalink":"https://missalexia.com/stories/blending-problem/","summary":"Something mathematical","title":"A Blending Problem with XPRESS"},{"content":"Task: A generic medicine producer has three products: P, K, and R. One production unit is a big box containing 1000 small boxes. The demand forecasts for the next five weeks are the following:\nThe capacity requirements of the products are equal and the production of one production unit lasts 1 time unit. The weekly capacity of the company is 5000 time units. The set-up costs and the inventory holding unit costs (being in stock for one week) are the following: AP=$230, AK=$150, AR=$320, hP=$4, hK=$3, hR=$6. Determine the minimal cost production schedule.\nModel: Variables: x_ij: the amount we produce for product i in month j\ns_ij: the amount we store for product i in month j\nb_ij=1 if we produce product i in month j, b_ij=0 if not.\ni={P,K,R}, j={1,2,3,4,5}\nParameters: d_ij: demand of product i in month j\nc: weekly capacity\ne_i: set-up cost of product i\nh_i: holding unit cost of product i\nk_i: initial inventory of product i\nSign constraints: x_ij ‚â•0 integer, s_ij ‚â•0 integer, b_ij binary, for all i,j\nConstraints: ‚àë_i(x_ij)‚â§ c, for all j\nd_i1 = x_i1 + k_i - s_i1, for all i\nd_ij = x_ij + k_i - s_ij, for all i, for all j!=1\n(x_ij ‚â•0 ‚üπ b_ij = 1): x_ij ‚â§ c*b_ij (c is some large number, we can use weekly capacity instead, it won‚Äôt make a difference) for all i,j\n(x_ij=0 ‚üπ b_ij = 0): x_ij ‚â• b_ij, for all i,j\nObjective function: minimize ‚àë_i‚àë_j(h_i * s_ij + e_i * b_ij)\nThis works well. If we change the set-up cost of K from 150 to 150,000, see what will happen:\nIndeed. In order to minimize the cost, it has to reduce the number of times to set up the production of K, because storage cost is cheaper in comparison.\n","permalink":"https://missalexia.com/stories/optimization-model/","summary":"Something mathematical","title":"An Optimization Model Case in AMPL"},{"content":"If you have ever encountered bibliographic analysis, you might have heard the terms h-index and g-index. Here, I will explain what they are and how to implement them with python code.\nThe h-index is an author-level metric that measures both the productivity and citation impact of the publications of a scientist or scholar. It can also be applied to the productivity and impact of a scholarly journal as well as a group of scientists, say, a department or university or country. So, both productivity and impact are required for a high h-index. Neither a few highly cited papers nor a long list of papers with only a handful of citations will yield a high h-index.\nNow comes the definition.\nh-index (f) = max { i ‚àà ‚Ñï: f (i) ‚â• i }, where f is the function that corresponds to the number of citations for each publication ordered in decreasing order. In other words, first, we order the number of citations for each publication of that person in decreasing order, then compare each number with its corresponding index. The h-index is the number of citations where it is greater than or equal to its index. I will give you 2 examples.\nResearcher Alice has 5 publications: A, B, C, D, E, cited 21, 6, 5, 4, 3 times respectively. Since it is already ordered, we can put them directly in a table.\nIt‚Äôs not hard to see that publication D has the same number of citations and the index. So, the h-index for Alice is 4.\nResearcher Bob has 6 publications: A, B, C, D, E, F, cited 24, 6, 12, 36, 2, 2 times respectively. First, we order them in decreasing order and put them on the table.\nAfter comparing, we see E has index number 5, where else the number of citations is 2. Thus, the h-index for Bob is 4.\nHow to do it in Python? In my example, I want to calculate h-index for each author. Note that in my author columns there can be many authors, and each author can appear in many columns.\nBasic idea is, set each individual author in a single row, and map the corresponding number of times cited together in a list in a new column.\nFirst, I select relevant columns and drop null values, then I split strings in the author column and transform them into different rows, drop irrelevant columns.\nSince in the Authors column, each person can appear many times (i.e. they write more than 1 paper). Create a new data frame by grouping authors, here I use an aggregate function, which applies the functions inside to each unique authors, then it will return a list of all the entries in Times Cited for the specific author.\nThen, I define a basic function that returns the h_index. There are many ways to do it for sure. I first turn an unsorted list into a sorted list in decreasing order, then compare each element in the list to its index+1. Since the elements are decreasing and the indexes are increasing, the code below will surely find the correct index value.\ndef h_index(li): li_sorted=sorted(li, reverse=True) for i in li_sorted: if i \u0026lt; li_sorted.index(i)+1: break return li_sorted.index(i)  Finally, I create a new column to store h_index by applying the defined function on the time cited list columns. After refining the data frame, you will get the final result.\nVery simple! There are also many creative ways to give more information to your h-index summary statistics. For example, you can add more dimensions of data, such as the author‚Äôs research area, country, university, etc.\nLet‚Äôs quickly talk about the g-index. If you already know h-index, then g-index is very easy to understand. The algorithm is: First, sort the list in descending order, then, iterate over the list, for each element, compare the sum term up to the element you are standing at with the index squared, stop at the point where index squared is ‚â• the sum term.\ndef g_index(li): li_sorted = sorted(li, reverse=True) for i in li_sorted: if sum(li_sorted[:li_sorted.index(i)+1])\u0026lt;(li_sorted.index(i)+1)**2: break return li_sorted.index(i)+1 ","permalink":"https://missalexia.com/stories/h-index-g-index/","summary":"Explained with code","title":"H-index \u0026 G-index"}]